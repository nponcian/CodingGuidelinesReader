#!/bin/bash

# Variables for Folder Paths
# The mainFolderPathh should contain the CodingGuidelinesReader Git repository.
# When using the <source> command, make sure to write the complete absolute path of the CodingGuidelinesReader
# Git repository so that this script can be executed not just in the directory to where <source>
# command was issued but to wherever directory you are currently in. For example <source /Absolute/Path/To/script>
# then you can.be able to call <script> anywhere you are in the file directories.
# On the other hand if not using the <source> command, there are no limitations when issuing the script
# as a binary <./> or <../Relative/Path/To/script> or </Absolute/Path/To/script> or directly through
# bash <bash script> or <bash ../Relative/Path/To/script> or <bash /Absolute/Path/To/script>
mainFolderPathh=$(dirname "${BASH_SOURCE}")
nokiaCodingGuidelinesFilePathh="${mainFolderPathh}/Guidelines/CodingGuidelines_Nokia.txt"
coreCodingGuidelinesFilePathh="${mainFolderPathh}/Guidelines/CodingGuidelines_Core.txt"
# If script is intended to be run on a shared common device, the configFolderPathh directory should
# have RWX rights for all
configFolderPathh="${mainFolderPathh}/ConfigFiles"
configFilePathh="${configFolderPathh}/config_$(whoami)"

# Variables for Nokia Coding Guidelines
firstLineToReadInNokiaGuide=1
lastLineToReadInNokiaGuide=406
defaultItemsPerDayInNokiaGuide=5

# Variables for C++ Core Guidelines
firstLineToReadInCoreGuide=1
lastLineToReadInCoreGuide=14635
defaultItemsPerDayInCoreGuide=1

func_showhelp()
{
    echo
    echo "This script by default displays a set of Nokia Coding Guidelines for the day."
    echo "For emphasis, only the same set of guidelines would be displayed within the course of the day."
    echo "There are flags to change this default settings if you wish to."
    echo
    echo "This script can also display C++ Core Guidelines if issued the corresponding flags for it."
    echo
    echo "USAGE:"
    echo
    echo "1. To display Coding Guidelines upon login to shell"
    echo "    Step 1: <vim ~/.bashrc>"
    echo "    Step 2: Add line <source /Absolute/Path/To/CodingGuidelinesReader/showcppguide>"
    echo "    Note:"
    echo "        The complete absolute path must be sourced so that it can be invoked later to wherever directory you are"
    echo "        This is a one-time step. Once done, you don't have to repeat it anymore even upon relogin"
    echo "        If the script has already been sourced, then it can be simply invoked by <showcppguide>"
    echo
    echo "2. To display Coding Guidelines at any point in time"
    echo "    Option 1: Source the file (should be by its complete absolute path)"
    echo "                    <source /Absolute/Path/To/CodingGuidelinesReader/showcppguide>"
    echo "                    or"
    echo "                    <source /Absolute/Path/To/CodingGuidelinesReader/showcppguide --flag>"
    echo "                    or"
    echo "                    <. /Absolute/Path/To/CodingGuidelinesReader/showcppguide>"
    echo "                    or"
    echo "                    <. /Absolute/Path/To/CodingGuidelinesReader/showcppguide --flag>"
    echo "    Option 2: Call the function directly (only if the script has already been sourced)"
    echo "                    <showcppguide>"
    echo "                    or"
    echo "                    <showcppguide --flag>"
    echo "    Option 3: Execute the file (could either be by absolute or relative path)"
    echo "                    <"${mainFolderPathh}"/showcppguide>"
    echo "                    or"
    echo "                    <"${mainFolderPathh}"/showcppguide --flag>"
    echo "                    or"
    echo "                    <bash "${mainFolderPathh}"/showcppguide>"
    echo "                    or"
    echo "                    <bash "${mainFolderPathh}"/showcppguide --flag>"
    echo
    echo "FLAGS SETTINGS:"
    echo
    echo "Please input only one flag at a time"
    echo
    echo "1. --help"
    echo "        At your service when you need help!"
    echo
    echo "2. --adjustnokiaguidelinesperday X"
    echo "        Adjust the number of Nokia Coding Guidelines displayed per day to value X"
    echo "        For reference, the default setting by the script is 5 per day"
    echo
    echo "3. --setdisplaynextsetofnokiaguidelines"
    echo "        Display the next set of Nokia Coding Guidelines"
    echo "        Use it if you want to move on already from the set of guidelines displayed for the current day"
    echo
    echo "4. --showcppcoreguide or --showcppcoreguide X"
    echo "        Display 1 item from the C++ Core Guidelines"
    echo "        Each invoke would display a different lesson"
    echo "        Variant with argument X would start and show 1 guideline from line X"
    echo "            Range of allowed values: "${firstLineToReadInCoreGuide}" to "${lastLineToReadInCoreGuide}
    echo
    echo "5. --showallnokia"
    echo "        Display all Nokia Coding Guidelines on another screen"
    echo
    echo "6. --showallcore"
    echo "        Display all C++ Core Guidelines on another screen"
    echo
    echo "7. --reset"
    echo "        Reset all your settings to default"
    echo "        This will also restart the reading of your guidelines"
    echo "        This would only affect the user who invoked it, other users using the same repository are unaffected"
    echo
}

func_showcppnokiaguide()
{
    echo
    echo "Processing now your daily dose of Nokia Coding Guidelines..."
    echo

    local currentDatee=$(date +'%m-%d-%Y') # ${1} # to test this, input date manually by adding argument

    if [ ! -e ${configFilePathh} ]; then
        # Create a new .config_name file with default starting values for reading the guidelines
        touch ${configFilePathh}
        echo "nokiaGuide_DateOfLastRead=${currentDatee}" >> ${configFilePathh}
        echo "nokiaGuide_PreviousLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}
        echo "nokiaGuide_NextLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}
        echo "nokiaGuide_ItemsPerDay=${defaultItemsPerDayInNokiaGuide}" >> ${configFilePathh}
        echo "coreGuide_NextLineToProcess=${firstLineToReadInCoreGuide}" >> ${configFilePathh}
        source ${configFilePathh}
    else
        source ${configFilePathh}
        # Display only the same set of guidelines within a day no matter how many times this script is invoked
        # Move on to the next set of guidelines if the day of last read is not today
        if [[ "$currentDatee" == "$nokiaGuide_DateOfLastRead" ]]; then
            nokiaGuide_NextLineToProcess=${nokiaGuide_PreviousLineToProcess}
        else
            nokiaGuide_PreviousLineToProcess=${nokiaGuide_NextLineToProcess}
        fi
    fi

    local lineProcessedInNokiaGuide=0

    while read line; do
        lineProcessedInNokiaGuide=$((${lineProcessedInNokiaGuide}+1))

        if (( ${lineProcessedInNokiaGuide} < ${nokiaGuide_NextLineToProcess} )); then
            continue
        elif (( ${lineProcessedInNokiaGuide} >= ${lastLineToReadInNokiaGuide} )); then
            echo "${line}"
            lineProcessedInNokiaGuide=${firstLineToReadInNokiaGuide}
            break
        fi

        # This design is based on how specifically the Nokia Coding Guidelines is written, from which
        # new guideline items are labeled with the format <#.> or <#.#> like for example <2.> or <5.9>
        # thus this specifically finds occurrence of [0-9]\.
        if [[ ${line} =~ [0-9]\. ]]; then
            nokiaGuide_ItemsPerDay=$((${nokiaGuide_ItemsPerDay}-1))
            if (( ${nokiaGuide_ItemsPerDay} < 0 )); then
                break
            fi
        fi

        # In this echo "" below, without this quotation, a ${line} containing "/*" will not be displayed as "/*"
        # but rather as literal directories from root folder / such as "/bin /boot /build /CD_ROM /cgroup..."
        echo "${line}"
    done < ${nokiaCodingGuidelinesFilePathh}

    sed -i 's/nokiaGuide_DateOfLastRead=.*/nokiaGuide_DateOfLastRead='${currentDatee}'/' ${configFilePathh}
    sed -i 's/nokiaGuide_PreviousLineToProcess=.*/nokiaGuide_PreviousLineToProcess='${nokiaGuide_PreviousLineToProcess}'/' ${configFilePathh}
    sed -i 's/nokiaGuide_NextLineToProcess=.*/nokiaGuide_NextLineToProcess='${lineProcessedInNokiaGuide}'/' ${configFilePathh}

    echo
    echo
    echo
    echo "Do you want to see C++ Core Guidelines? Advance your career NOW and learn more of this!"
    echo "Just execute the script with flag --showcppcoreguide"
    echo "For more information, run help <"${mainFolderPathh}"/showcppguide --help>"
    echo
}

func_showcppcoreguide()
{
    echo
    echo "Processing now your daily dose of C++ Core Guidelines..."
    echo

    local currentDatee=$(date +'%m-%d-%Y')

    if [ ! -e ${configFilePathh} ]; then
        # Create a new .config_name file with default starting values for reading the guidelines
        touch ${configFilePathh}
        echo "nokiaGuide_DateOfLastRead=${currentDatee}" >> ${configFilePathh}
        echo "nokiaGuide_PreviousLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}
        echo "nokiaGuide_NextLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}
        echo "nokiaGuide_ItemsPerDay=${defaultItemsPerDayInNokiaGuide}" >> ${configFilePathh}
        echo "coreGuide_NextLineToProcess=${firstLineToReadInCoreGuide}" >> ${configFilePathh}
    fi

    source ${configFilePathh}

    # Since there is an option to invoke <--showcppcoreguide X> where X is a line number to read,
    # then this must overwrite whatever is currently set by the script
    if [ ! -z "${2}" ]; then
        coreGuide_NextLineToProcess=${2}
    fi

    local lineProcessedInCoreGuide=${coreGuide_NextLineToProcess}
    local defaultItemsPerDayInCoreGuideCtr=${defaultItemsPerDayInCoreGuide}

    tail -n +"${coreGuide_NextLineToProcess}" "${coreCodingGuidelinesFilePathh}" | while read line; do

        # This design is based on how specifically the C++ Core Guidelines is written, from which
        # new guideline items are labeled with the format <Letter.Number> like for example <R.32>
        # but also includes other formats, these are listed below when finding occurrence of those
        if [[ ${line} =~ [A-Z]\.[0-9]*\: ||
                ${line} =~ "Enum."[0-9]*\: ||
                ${line} =~ "Per."[0-9]*\: ||
                ${line} =~ "Con."[0-9]*\: ]]; then
            defaultItemsPerDayInCoreGuideCtr=$((${defaultItemsPerDayInCoreGuideCtr}-1))
            if (( ${defaultItemsPerDayInCoreGuideCtr} < 0 )); then
                sed -i 's/coreGuide_NextLineToProcess=.*/coreGuide_NextLineToProcess='${lineProcessedInCoreGuide}'/' ${configFilePathh}
                break
            fi
        fi

        echo "${line}"
        lineProcessedInCoreGuide=$((${lineProcessedInCoreGuide}+1))

        if (( ${lineProcessedInCoreGuide} > ${lastLineToReadInCoreGuide} )); then
            sed -i 's/coreGuide_NextLineToProcess=.*/coreGuide_NextLineToProcess='${firstLineToReadInCoreGuide}'/' ${configFilePathh}
            break
        fi
    done
}

# The one that is directly called when this file is already sourced and then called by <showcppguide>
showcppguide()
{
    if [ $# -eq 0 ]; then
        # This is the default behavior when invoking without any flags, to display the Nokia guidelines
        func_showcppnokiaguide

    elif [ "${1}" == "--help" ]; then
        func_showhelp

    elif [[ "${1}" == "--adjustnokiaguidelinesperday" ||
            "${1}" == "--setdisplaynextsetofnokiaguidelines" ]]; then

        if [ ! -e ${configFilePathh} ]; then
            # If there is no existing config file for user, create it anew and adjustnokiaguidelinesperday
            # if needed. The flag setdisplaynextsetofnokiaguidelines is of no sense here because there
            # is no existing config file to be used as basis for moving to the next set of guidelines.
            local currentDatee=$(date +'%m-%d-%Y')

            touch ${configFilePathh}
            echo "nokiaGuide_DateOfLastRead=${currentDatee}" >> ${configFilePathh}
            echo "nokiaGuide_PreviousLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}
            echo "nokiaGuide_NextLineToProcess=${firstLineToReadInNokiaGuide}" >> ${configFilePathh}

            if [ "${1}" == "--adjustnokiaguidelinesperday" ]; then
                echo "nokiaGuide_ItemsPerDay=${2}" >> ${configFilePathh}
            else
                echo "nokiaGuide_ItemsPerDay=${defaultItemsPerDayInNokiaGuide}" >> ${configFilePathh}
            fi

            echo "coreGuide_NextLineToProcess=${firstLineToReadInCoreGuide}" >> ${configFilePathh}

        else
            # If there is an existing config file, configure the target setting to be modified
            if [ "${1}" == "--adjustnokiaguidelinesperday" ]; then
                sed -i 's/nokiaGuide_ItemsPerDay=.*/nokiaGuide_ItemsPerDay='${2}'/' ${configFilePathh}
            elif [ "${1}" == "--setdisplaynextsetofnokiaguidelines" ]; then
                # The entered command --setdisplaynextsetofnokiaguidelines shall move on and display
                # the next set of Nokia Coding Guidelines. To do this, the solution below is to take
                # advantage of how this script detects if it is the same day to not display the next
                # set of Nokia Coding Guidelines, which is by checking if the current date of execution
                # is still equal to the date of last execution (via variable nokiaGuide_DateOfLastRead)
                # which is written to the config_name file. Thus, by simply changing this text by
                # adding "_modified" would then make it look like upon comparison to current date
                # that the date has changed even if it actually did not. Comparison that will happen
                # will be for example <06-25-2019 != 06-25-2019_modified> which will then result to
                # moving on to the next set of Nokia Coding Guidelines items
                source ${configFilePathh}
                sed -i 's/nokiaGuide_DateOfLastRead=.*/nokiaGuide_DateOfLastRead='${nokiaGuide_DateOfLastRead}'_modified/' ${configFilePathh}
            fi
        fi

        func_showcppnokiaguide

    elif [ "${1}" == "--showcppcoreguide" ]; then
        func_showcppcoreguide ${@}

    elif [ "${1}" == "--showallnokia" ]; then
        cat ${nokiaCodingGuidelinesFilePathh} | less

    elif [ "${1}" == "--showallcore" ]; then
        cat ${coreCodingGuidelinesFilePathh} | less

    elif [ "${1}" == "--reset" ]; then
        rm -f ${configFilePathh}

    fi
}

# The one that is directly called when this file is either
# 1. executed <./showcppguide>
# 2. bashed <bash showcppguide>
# 3. sourced <source showcppguide>
# 3. added to ${PATH} and then is executed or called via <showcppguide>
showcppguide ${@}
echo
